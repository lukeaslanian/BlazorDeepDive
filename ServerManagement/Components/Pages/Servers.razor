@page "/servers"
@page "/servers/back_from/{cityName}"
@using ServerManagement.StateStore

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject OttawaOnlineServersStore OttawaOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject HalifaxOnlineServersStore HalifaxOnlineServersStore
@inject CalgaryOnlineServersStore CalgaryOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

<PageTitle>Servers - Server Management</PageTitle>

<h3>Servers</h3>
<br/>
<br/>

@if (!isInitialized)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <CityListComponent
        @ref="cityListComponent"
        SelectCityCallback="HandleCitySelection"
        selectedCity="@selectedCity"></CityListComponent>

    <br/>

    <SearchBarComponent
        @ref="searchBarComponent"
        SearchServerCallback="HandleSearchServer"
        style="width:500px"></SearchBarComponent>

    <br/>

    <CascadingValue Name="SelectedCity" Value="@selectedCity">
        <ServerListComponent
            CityName="@selectedCity"
            SearchFilter="@searchFilter"></ServerListComponent>
    </CascadingValue>

    <p>
        <a href="/servername" class="btn btn-primary">Add Server</a>
    </p>
}

@code {
    private bool isInitialized;

    [Parameter] public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string searchFilter = "";

    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    protected override async Task OnInitializedAsync()
    {
        // Use OnInitializedAsync for better performance with prerendering
        if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
        {
            selectedCity = CityName;
        }

        // Initialize server counts asynchronously in the background
        await InitializeServerCounts();

        isInitialized = true;
        StateHasChanged();
    }

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        searchFilter = string.Empty;
        searchBarComponent?.ClearFilter();
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;
        cityListComponent?.ClearSelection();
    }

    private async Task InitializeServerCounts()
    {
        try
        {
            await Task.Run(() =>
            {
                // Get all servers in one database call instead of 5 separate calls
                var allServers = ServersEFCoreRepository.GetServers();

                // Group by city and count online servers efficiently
                var cityServerCounts = allServers
                    .Where(s => s.IsOnline)
                    .GroupBy(s => s.City)
                    .ToDictionary(g => g.Key ?? "", g => g.Count());

                // Update each city store with the count
                TorontoOnlineServersStore.SetNumbersServersOnline(
                    cityServerCounts.GetValueOrDefault("Toronto", 0));
                MontrealOnlineServersStore.SetNumbersServersOnline(
                    cityServerCounts.GetValueOrDefault("Montreal", 0));
                OttawaOnlineServersStore.SetNumbersServersOnline(
                    cityServerCounts.GetValueOrDefault("Ottawa", 0));
                CalgaryOnlineServersStore.SetNumbersServersOnline(
                    cityServerCounts.GetValueOrDefault("Calgary", 0));
                HalifaxOnlineServersStore.SetNumbersServersOnline(
                    cityServerCounts.GetValueOrDefault("Halifax", 0));
            });
        }
        catch (Exception ex)
        {
            // Log error but don't crash the page
            Console.WriteLine($"Error initializing server counts: {ex.Message}");
            // Set defaults in case of error
            TorontoOnlineServersStore.SetNumbersServersOnline(0);
            MontrealOnlineServersStore.SetNumbersServersOnline(0);
            OttawaOnlineServersStore.SetNumbersServersOnline(0);
            CalgaryOnlineServersStore.SetNumbersServersOnline(0);
            HalifaxOnlineServersStore.SetNumbersServersOnline(0);
        }
    }

}
