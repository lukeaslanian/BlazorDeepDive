@inherits BaseComponent

@implements IDisposable

@inject IServersEFCoreRepository ServersEFCoreRepository

@inject PersistentComponentState ApplicationState

@if (servers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <RepeaterComponent Items="servers">
            <Header>
                <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        City
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        People Online
                    </th>
                    <th></th>
                    <th></th>
                </tr>
                </thead>
            </Header>
            <Row Context="server">
                <ServerComponent Server="server"></ServerComponent>
            </Row>
        </RepeaterComponent>
    </table>
}


@code {

    [Parameter] public string? CityName { get; set; }

    [Parameter] public string SearchFilter { get; set; } = "";

    private List<Server>? servers;
    private string? lastCityName;
    private string lastSearchFilter = "";

    private PersistingComponentStateSubscription persistingSubscription;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        // Only update if parameters actually changed
        var hasChanges = false;

        if (parameters.TryGetValue<string>("CityName", out var cityName) && cityName != CityName)
        {
            hasChanges = true;
        }

        if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter) && searchFilter != SearchFilter)
        {
            hasChanges = true;
        }

        if (hasChanges)
        {
            return base.SetParametersAsync(parameters);
        }

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        // Only reload data if parameters actually changed
        if (CityName != lastCityName || SearchFilter != lastSearchFilter)
        {
            LoadServerData();
            lastCityName = CityName;
            lastSearchFilter = SearchFilter;
        }
    }

    protected override void OnInitialized()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Server>?>("Servers", out var restored))
        {
            LoadServerData();
        }
        else
        {
            servers = restored!;
        }

        // Removed the timer that was causing unnecessary re-renders every 5 seconds
        // Timer was causing performance issues
    }

    private void LoadServerData()
    {
        if (string.IsNullOrWhiteSpace(SearchFilter))
        {
            servers = ServersEFCoreRepository.GetServersByCity(CityName ?? "Toronto");
        }
        else
        {
            servers = ServersEFCoreRepository.SearchServers(SearchFilter);
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("Servers", servers);
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        // Only render if we have actual changes
        return base.ShouldRender();
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

}
