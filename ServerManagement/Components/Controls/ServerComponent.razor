@using ServerManagement.StateStore
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject OttawaOnlineServersStore OttawaOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject HalifaxOnlineServersStore HalifaxOnlineServersStore
@inject CalgaryOnlineServersStore CalgaryOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository


@if (Server != null)
{
    <tr style="background-color: @GetBackgroundColor()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@(Server.IsOnline ? "green" : "red")">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <text>@cachedRandomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="@(() => { SetServerStatus(false); })">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button"
                        class="btn btn-outline-success"
                        @onclick="@(() => { SetServerStatus(true); })">
                    Turn On
                </button>
            }
            &nbsp;
            <a href="/server/@Server.ServerId" class="btn btn-outline-primary">Edit</a>

        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-Server-{Server.ServerId}")"
                      OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>
    </tr>
}


@code {
    private static readonly Random random = new();
    private int cachedRandomNumber;

    [Parameter] public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    protected override void OnParametersSet()
    {
        // Generate random number once when server changes, not on every render
        if (Server?.IsOnline == true)
        {
            cachedRandomNumber = random.Next(0, 500);
        }
    }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersEFCoreRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers", true);
        }
    }

    private string GetBackgroundColor()
    {
        return SelectedCity switch
        {
            "Toronto" => "powderblue",
            "Montreal" => "lightgray",
            "Ottawa" => "palegreen",
            "Calgary" => "pink",
            "Halifax" => "white",
            _ => "white"
        };
    }

    private void SetServerStatus(bool status)
    {
        if (Server is not null)
        {
            if (Server.IsOnline != status)
            {
                var num = 0;
                switch (Server.City)
                {
                    case "Toronto":
                        num = TorontoOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            TorontoOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            TorontoOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Montreal":
                        num = MontrealOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            MontrealOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            MontrealOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Ottawa":
                        num = OttawaOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            OttawaOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            OttawaOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Calgary":
                        num = CalgaryOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            CalgaryOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            CalgaryOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Halifax":
                        num = HalifaxOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            HalifaxOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            HalifaxOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                }

                Server.IsOnline = status;

                ServersEFCoreRepository.UpdateServer(Server.ServerId, Server);

                // Update cached random number when status changes
                if (status)
                {
                    cachedRandomNumber = random.Next(0, 500);
                }
            }
        }
    }

}